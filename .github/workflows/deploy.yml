name: CI/CD Pipeline

on:
  push:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run health check test
        run: |
          node src/server.js &
          SERVER_PID=$!
          sleep 5
          curl -f http://localhost:3000/health || exit 1
          kill $SERVER_PID

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=master-${{ github.sha }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Alibaba Cloud
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        env:
          IMAGE_TAG: master-${{ github.sha }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        with:
          host: ${{ secrets.ALIBABA_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          envs: IMAGE_TAG,REGISTRY,IMAGE_NAME
          script: |
            # Navigate to deployment directory
            cd /opt/sandbox-app

            # Update .env file with new image tag
            cat > .env << EOF
            REGISTRY_URL=$REGISTRY
            IMAGE_NAME=$IMAGE_NAME
            IMAGE_TAG=${IMAGE_TAG:0:17}
            HOST_PORT=80
            CONTAINER_PORT=3000
            NODE_ENV=production
            EOF

            echo "Updated .env file:"
            cat .env

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin

            # Pull latest image
            echo "Pulling image: $REGISTRY/$IMAGE_NAME:${IMAGE_TAG:0:17}"
            docker compose pull web

            # Restart container with new image
            docker compose up -d web

            # Wait for health check
            echo "Waiting for container to be healthy..."
            timeout 60 bash -c 'until docker inspect --format="{{.State.Health.Status}}" sandbox-cicd-app 2>/dev/null | grep -q healthy; do sleep 2; done' || echo "Warning: Health check timeout"

            # Clean up old images (keep last 3)
            docker image prune -af --filter "until=72h"

            # Show deployment status
            echo "Deployment completed successfully!"
            docker compose ps
            docker logs --tail 20 sandbox-cicd-app
